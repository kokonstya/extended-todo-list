{"version":3,"sources":["actions/index.js","components/AppHeader/AppHeader.jsx","utils/compose.js","components/todoServiceContext/todoServiceContext.js","components/hoc/withTodoService.js","components/DialogList/DialogList.jsx","components/ModalList/ModalList.jsx","components/Spinner/Spinner.jsx","components/Error/Error.jsx","components/Alert/Alert.jsx","components/TodoLists/TodoLists.jsx","components/DialogTodo/DialogTodo.jsx","components/ModalTodo/ModalTodo.jsx","components/Todos/Todos.jsx","components/App/App.jsx","reducers/index.js","store.js","index.js","services/todo-service.js"],"names":["onUpdateList","action","type","id","title","onUpdateTodo","text","important","done","date","closeModalTodo","payload","dialogTodoToggle","dialogListToggle","closeModalList","showAlert","status","message","closeAlert","getId","arr","newId","Math","floor","random","search","some","item","length","setLocalStorageData","todoLists","JSONData","JSON","stringify","localStorage","setItem","AppHeader","state","setAutoSave","setInterval","props","value","className","aria-hidden","Button","variant","ButtonGroup","onClick","disabled","this","clearInterval","setState","removeItem","Component","connect","compose","funcs","comp","reduceRight","wrapped","f","React","createContext","TodoServiceProvider","Provider","TodoServiceConsumer","Consumer","withTodoService","Wrapped","todoService","DialogList","currentList","find","currentTodoList","Modal","size","aria-labelledby","centered","Header","closeButton","Title","ModalBody","todos","map","key","Footer","onUpdateListId","setTimeout","ModalList","inputValue","onChange","e","target","onSubmit","preventDefault","onUpdateListItem","prevProps","prevState","snapshot","Body","Form","InputGroup","Prepend","Text","FormControl","placeholder","aria-label","aria-describedby","Spinner","Error","AlertWindow","Alert","TodoLists","filterValue","setCurrentTodoList","isListDialogOpened","isListModalOpened","openModalList","isAlertShow","onFilterChanged","classNameAll","classNameActive","classNameDone","show","onHide","items","filter","list","todo","every","sort","a","b","localeCompare","classNames","TodoListsContainer","todoListsLoaded","todoListsError","todoListsRequested","getTodoLists","then","data","catch","error","loading","DialogTodo","currentTodo","onUpdateTodoId","ModalTodo","checkValue","onChangeCheckbox","checked","onUpdateTodoItem","Date","now","Label","openModalTodo","isTodoDialogOpened","isTodoModalOpened","idx","i","Check","timeInMs","year","getFullYear","month","getMonth","day","getDate","hours","getHours","minute","getMinutes","App","initialState","sortBy","reducer","console","log","List","currentListModal","todoModal","lists","newList","findIndex","slice","listId","newTodo","todoId","ListId","newLists","store","createStore","Promise","resolve","reject","getItem","parse","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2906ec46.chunk.js","sourcesContent":["export const todoListsRequested = () => {\n    return {\n        type: 'FETCH_TODO_LISTS_REQUEST'\n    }\n};\n\nexport const todoListsLoaded = (todoLists) => {\n    return {\n        type: 'FETCH_TODO_LISTS_SUCCESS',\n        payload: todoLists\n    };\n};\n\nexport const todoListsError = (error) => {\n    return {\n        type: 'FETCH_TODO_LISTS_FAILURE',\n        payload: error\n    };\n};\n\nexport const onUpdateList = (action, ...args) => {\n    return {\n        type: 'UPDATE_LIST',\n        action: action,\n        id: args[0],\n        title: args[1]\n    };\n};\n\nexport const onUpdateTodo = (action, ...args) => {\n    return {\n        type: 'UPDATE_TODO',\n        action: action,\n        id: args[0],\n        text: args[1],\n        important: args[2],\n        done: args[3],\n        date: args[4]\n    };\n};\n\nexport const setCurrentTodoList = (id) => {\n    return {\n        type: 'SET_CURRENT_TODO_LIST',\n        payload: id\n    };\n};\nexport const openModalTodo = (id) => {\n    return {\n        type: 'OPEN_MODAL_TODO',\n        payload: id\n    };\n};\nexport const closeModalTodo = (id) => {\n    return {\n        type: 'CLOSE_MODAL_TODO',\n        payload: id\n    };\n};\nexport const dialogTodoToggle = (id) => {\n    return {\n        type: 'DIALOG_TODO_TOGGLE',\n        payload: id\n    };\n};\n\nexport const dialogListToggle = (id) => {\n    return {\n        type: 'DIALOG_LIST_TOGGLE',\n        payload: id\n    };\n};\n\nexport const openModalList = (id) => {\n    return {\n        type: 'OPEN_MODAL_LIST',\n        payload: id\n    };\n};\nexport const closeModalList = (id) => {\n    return {\n        type: 'CLOSE_MODAL_LIST',\n        payload: id\n    };\n};\nexport const showAlert = (status, message) => {\n\n    return {\n        type: 'SHOW_ALERT',\n        status: status,\n        message: message\n    }\n};\nexport const closeAlert = () => {\n    return {\n        type: 'CLOSE_ALERT'\n    }\n};\n\nexport const onFilterChanged = (filterValue) => {\n    return {\n        type: 'ON_FILTER_CHANGE',\n        payload: filterValue\n    }\n};\n\n\n\nexport const getDate = (timeInMs) => {\n    const date = new Date(timeInMs);\n    const year = date.getFullYear();\n    let month = date.getMonth() + 1;\n    month = (month < 10) ? '0' + month : month;\n    let day = date.getDate();\n    day = (day < 10) ? '0' + day : day;\n    let hours = date.getHours();\n    hours = (hours < 10) ? '0' + hours : hours;\n    let minute = date.getMinutes();\n    minute = (minute < 10) ? '0' + minute : minute;\n    return `${day}.${month}.${year} ${hours}:${minute}`\n};\n\nexport const getId = (arr) => {\n    let newId;\n    newId = Math.floor(Math.random()*100);\n    const search = arr.some((item) => item.id === newId);\n    if (arr.length >= 95) {\n        return 0;\n    }\n    if (search) {\n        return getId(arr);\n    } else {\n        return newId;\n    }\n};\n\nexport const filter = (items, filter) => {\n    switch (filter) {\n        case 'all':\n            return items;\n        case 'active':\n            return items.filter((list) => list.todos.some((todo) => todo.done === false));\n        case 'done':\n            return items.filter((list) => list.todos.every((todo) => todo.done === true));\n        default:\n            return items;\n    }\n};\n\nexport const setLocalStorageData = (todoLists) => {\n    const JSONData = JSON.stringify([...todoLists]);\n    localStorage.setItem('data-todo-26042020', JSONData);\n};\nexport const clearLocalStorageData = () => {\n    localStorage.removeItem('data-todo-26042020')\n};\n","import React, {Component} from \"react\";\nimport {connect} from \"react-redux\";\n\nimport './AppHeader.scss'\nimport {clearLocalStorageData, setLocalStorageData} from \"../../actions\";\nimport {Button, ButtonGroup} from \"react-bootstrap\";\n\nclass AppHeader extends Component {\n    state = {\n        setAutoSave: setInterval(() => setLocalStorageData(this.props.todoLists), 10000),\n        value: false\n    };\n\n    render() {\n        return (\n            <header className={'bordered'}>\n                <div className={'logo'}><i className=\"fa fa-list-ol\" aria-hidden=\"true\"> ToDo-List</i></div>\n                <div className={'user-info'}>\n                    <b>User_Name_1</b>\n                    <Button variant={'info'}>Выйти</Button>\n                </div>\n                <ButtonGroup>\n                    <Button variant={\"success\"} onClick={() => setLocalStorageData(this.props.todoLists)}>Save</Button>\n                    <Button disabled={this.state.value} variant={\"warning\"} onClick={() => {\n                        clearInterval(this.state.setAutoSave);\n                        this.setState({value: true})\n                    }}>Off auto save</Button>\n                    <Button variant={\"danger\"} onClick={() => clearLocalStorageData()}>Reset all data</Button>\n                </ButtonGroup>\n            </header>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return state;\n};\nexport default connect(mapStateToProps, {})(AppHeader);\n","const compose = (...funcs) => (comp) => {\n    return funcs.reduceRight(\n        (wrapped, f) => f(wrapped), comp);\n};\n\nexport default compose;\n","import React from 'react';\n\nconst {\n    Provider: TodoServiceProvider,\n    Consumer: TodoServiceConsumer\n} = React.createContext();\n\nexport {\n    TodoServiceProvider,\n    TodoServiceConsumer\n};\n","import React from 'react';\nimport {TodoServiceConsumer} from '../todoServiceContext/todoServiceContext';\n\nconst withTodoService = () => (Wrapped) => {\n\n    return (props) => {\n        return (\n            <TodoServiceConsumer>\n                {\n                    (todoService) => {\n                        return (<Wrapped {...props}\n                                         todoService={todoService}/>);\n                    }\n                }\n            </TodoServiceConsumer>\n        );\n    }\n};\n\nexport default withTodoService;\n","import React, {Component} from \"react\";\nimport {Modal, Button, ModalBody} from \"react-bootstrap\";\nimport {connect} from \"react-redux\";\nimport { dialogListToggle, onUpdateList, showAlert, closeAlert } from \"../../actions/index\"\n\nclass DialogList extends Component {\n\n    render() {\n        const currentList = this.props.todoLists.find((item) => item.id === this.props.currentTodoList) ||\n            this.props.todoLists.find((item) => item);\n        if (!currentList) {\n            return <div></div>\n        }\n        return (\n            <Modal\n                {...this.props}\n                size=\"lg\"\n                aria-labelledby=\"contained-modal-title-vcenter\"\n                centered\n            >\n                <Modal.Header closeButton>\n                    <Modal.Title id=\"contained-modal-title-center\">\n                        Удалить список <i>{currentList.title}</i> ?\n                    </Modal.Title>\n                </Modal.Header>\n                <ModalBody>\n                    Всего будет удалено {currentList.todos.length} дел(а).\n                    {currentList.todos.map((item, id)=> <div key={id}>{item.text}</div>)}\n                </ModalBody>\n                <Modal.Footer>\n                    <Button variant=\"danger\" onClick={this.props.dialogListToggle}><i>НЕТ</i></Button>\n                    <Button variant=\"success\" onClick={()=>{this.props.onUpdateList('delete', this.props.onUpdateListId);\n                        this.props.showAlert('error', `Список ${currentList.title} удален `);\n                        setTimeout(this.props.closeAlert,3000)}}><i>ДА</i></Button>\n                </Modal.Footer>\n            </Modal>\n        );\n\n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n        todoLists: state.todoLists,\n        onUpdateListId: state.onUpdateListId,\n        currentTodoList: state.currentTodoList\n    };\n};\n\nexport default connect(mapStateToProps, { dialogListToggle, onUpdateList, showAlert, closeAlert })(DialogList);\n","import React, {Component} from \"react\";\nimport {Modal, Button, InputGroup, FormControl, Form} from \"react-bootstrap\";\nimport {connect} from \"react-redux\";\nimport {closeModalList, onUpdateList, showAlert, closeAlert, getId} from \"../../actions/index\"\n\nclass ModalList extends Component {\n    state = {\n        inputValue: ''\n    };\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (this.props.onUpdateListItem && prevProps !== this.props) {\n            this.setState({\n                inputValue: this.props.onUpdateListItem.title\n            })\n        }\n    }\n\n    onChange = (e) => {\n        this.setState({\n            inputValue: e.target.value\n        })\n    };\n    onSubmit = (e) => {\n        e.preventDefault();\n\n        if (!this.state.inputValue || this.state.inputValue.length <= 0) {\n            this.props.closeModalList();\n            this.props.showAlert('error', 'Должно быть больше 0 символов ');\n            setTimeout(this.props.closeAlert, 3000);\n        } else if (this.state.inputValue.length >= 30) {\n            this.props.closeModalList();\n            this.props.showAlert('error', 'Должно быть меньше 30 символов ');\n            setTimeout(this.props.closeAlert, 3000);\n        } else if (this.props.todoLists.some((item) => item.title === this.state.inputValue)) {\n            this.props.closeModalList();\n            this.props.showAlert('error', 'Такое название уже есть в списке ');\n            setTimeout(this.props.closeAlert, 3000);\n        } else {\n            if (this.props.onUpdateListItem) {\n                this.props.onUpdateList('update', this.props.onUpdateListItem.id, this.state.inputValue);\n                this.props.showAlert('success', `Список ${this.state.inputValue} изменен `);\n                setTimeout(this.props.closeAlert, 3000);\n            } else {\n                this.props.onUpdateList('add', getId(this.props.todoLists), this.state.inputValue);\n                this.props.showAlert('success', `Список ${this.state.inputValue} добавлен `);\n                setTimeout(this.props.closeAlert, 3000);\n            }\n        }\n    };\n\n    render() {\n        return (\n            <Modal\n                {...this.props}\n                size=\"lg\"\n                aria-labelledby=\"contained-modal-title-vcenter\"\n                centered\n            >\n                <Modal.Header closeButton>\n                    <Modal.Title id=\"contained-modal-title-vcenter\">\n                        Добавить новый список дел\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form onSubmit={this.onSubmit}>\n                        <InputGroup className=\"mb-3\">\n                            <InputGroup.Prepend>\n                                <InputGroup.Text id=\"basic-addon1\">Название</InputGroup.Text>\n                            </InputGroup.Prepend>\n                            <FormControl\n                                onChange={this.onChange} placeholder={'Добавить список дел'}\n                                value={this.state.inputValue}\n                                aria-label=\"Username\"\n                                aria-describedby=\"basic-addon\"\n                            />\n                        </InputGroup>\n                        <Button variant=\"success\" onClick={this.onSubmit}>Добавить</Button>\n                    </Form>\n                </Modal.Body>\n            </Modal>\n        );\n\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return state;\n};\n\nexport default connect(mapStateToProps, {closeModalList, onUpdateList, showAlert, closeAlert})(ModalList);\n","import React from 'react';\n\nimport './Spinner.css';\n\nconst Spinner = () => {\n    return (\n        <div className=\"lds-css\">\n            <div className=\"lds-double-ring\">\n                <div></div>\n                <div></div>\n            </div>\n        </div>\n    );\n};\n\nexport default Spinner;\n","import React from 'react';\nimport './Error.css';\n\nconst Error = () => {\n    return <div className={'error'}><i className=\"fa fas fa-bug\"></i> <i> Произошла ошибка при загрузке данных\n        =( <hr/> Повторите позже.</i></div>;\n};\n\nexport default Error;\n","import React from \"react\";\nimport {Alert} from \"react-bootstrap\";\n\nconst AlertWindow = (props) => {\n    if (props.status === 'error') {\n        return (\n            <Alert variant={'danger'}>\n                {props.message}\n            </Alert>\n        )\n    } else if (props.status === 'success') {\n        return (\n            <Alert variant={'success'}>\n                {props.message}\n            </Alert>\n        )\n    } else {\n        return (true)\n    }\n\n};\n\nexport default AlertWindow;\n","import React, {Component} from 'react';\nimport {\n    dialogListToggle, setCurrentTodoList, openModalList, closeModalList,\n    todoListsRequested, todoListsLoaded, todoListsError, filter, onFilterChanged\n} from \"../../actions\";\nimport {connect} from \"react-redux\";\nimport {Button, ButtonGroup} from \"react-bootstrap\";\nimport compose from \"../../utils/compose\";\nimport withTodoService from '../hoc/withTodoService';\nimport DialogList from \"../DialogList/DialogList\";\nimport ModalList from \"../ModalList/ModalList\";\nimport Spinner from \"../Spinner/Spinner\";\nimport Error from \"../Error/Error\";\nimport \"./TodoLists.css\";\nimport Alert from \"../Alert/Alert\";\n\nconst TodoLists = ({\n                       currentTodoList, filterValue, todoLists, setCurrentTodoList, dialogListToggle,\n                       isListDialogOpened, isListModalOpened, openModalList, closeModalList, isAlertShow, onFilterChanged\n                   }) => {\n    let classNameAll = \"outline-primary\";\n    let classNameActive = \"outline-primary\";\n    let classNameDone = \"outline-primary\";\n    if (filterValue === 'all') {\n        classNameAll = \"primary\";\n    }\n    if (filterValue === 'active') {\n        classNameActive = \"primary\";\n    }\n    if (filterValue === 'done') {\n        classNameDone = \"primary\";\n    }\n    return (\n        <div>\n\n            <DialogList\n                show={isListDialogOpened}\n                onHide={dialogListToggle}\n            />\n\n            <ModalList\n                show={isListModalOpened}\n                onHide={closeModalList}\n            />\n            <div>\n                <ButtonGroup>\n                    <Button onClick={() => onFilterChanged('all')} size=\"lg\"\n                            variant={classNameAll}>Все</Button>\n                    <Button onClick={() => onFilterChanged('active')} size=\"lg\"\n                            variant={classNameActive}>Неисполненные</Button>\n                    <Button onClick={() => onFilterChanged('done')} size=\"lg\"\n                            variant={classNameDone}>Исполненные</Button>\n                </ButtonGroup>\n                {filter(todoLists, filterValue).sort(function (a, b) {\n                    return a.title.localeCompare(b.title);\n                }).map((item) => {\n                    let classNames = 'todo-lists-title';\n                    if (item.id === currentTodoList) {\n                        classNames += ' current';\n                    }\n                    if (item.todos.every((item) => item.done === true) && item.todos.length !== 0) {\n                        classNames += ' done';\n                    } else if (item.todos.some((item) => item.done === false)) {\n                        classNames += ' active';\n                    }\n\n\n                    return (\n                        <div className={'todo-lists'} key={item.id} onClick={() => setCurrentTodoList(item.id)}>\n                            <h5 className={classNames}>{item.title}</h5>\n                            <div className={'buttons'}>\n                                <Button variant=\"outline-info\" size={'sm'} onClick={() => openModalList(item.id)}>\n                                    <i className=\"fa fa-pencil\"></i></Button>\n                                <Button variant=\"outline-info\" size={'sm'} onClick={() => dialogListToggle(item.id)}>\n                                    <i className=\"fa fa-times\"></i></Button>\n                            </div>\n                        </div>)\n                })}\n            </div>\n            <Button className={'add-todo-button'} variant=\"success\" size={'lg'}\n                    onClick={() => openModalList(null)}>+</Button>\n            <Alert show={isAlertShow.status}\n                   status={isAlertShow.status} message={isAlertShow.message}/>\n        </div>\n    )\n};\n\nclass TodoListsContainer extends Component {\n\n    componentDidMount() {\n        const {todoService, todoListsLoaded, todoListsError, todoListsRequested} = this.props;\n        todoListsRequested();\n        todoService.getTodoLists()\n            .then((data) => todoListsLoaded(data))\n            .catch((error) => todoListsError(error));\n    }\n\n    render() {\n        const {\n            todoLists, loading, error, setCurrentTodoList, dialogListToggle,\n            isListDialogOpened, openModalList, isListModalOpened, closeModalList, currentTodoList,\n            isAlertShow, filterValue, onFilterChanged\n        } = this.props;\n\n        if (loading) {\n            return <Spinner/>\n        }\n        if (error) {\n            return <Error/>\n        }\n        return <TodoLists todoLists={todoLists} setCurrentTodoList={setCurrentTodoList}\n                          dialogListToggle={dialogListToggle} currentTodoList={currentTodoList}\n                          isListDialogOpened={isListDialogOpened} openModalList={openModalList}\n                          isListModalOpened={isListModalOpened} closeModalList={closeModalList}\n                          isAlertShow={isAlertShow} filterValue={filterValue} onFilterChanged={onFilterChanged}/>\n    }\n}\n\nconst mapStateToProps = ({\n                             currentTodoList, onUpdateListId, todoLists, loading, error,\n                             isListDialogOpened, isListModalOpened, isAlertShow, filterValue\n                         }) => {\n    return {\n        currentTodoList, onUpdateListId, todoLists, loading, error,\n        isListDialogOpened, isListModalOpened, isAlertShow, filterValue\n    };\n};\n\nexport default compose(\n    withTodoService(),\n    connect(mapStateToProps, {\n        todoListsLoaded, todoListsError, setCurrentTodoList, dialogListToggle,\n        todoListsRequested, openModalList, closeModalList, onFilterChanged\n    })\n)(TodoListsContainer);\n\n\n","import React, {Component} from \"react\";\nimport {Modal, Button} from \"react-bootstrap\";\nimport {connect} from \"react-redux\";\nimport {dialogTodoToggle, showAlert, onUpdateTodo, closeAlert} from \"../../actions/index\"\n\nclass DialogTodo extends Component {\n\n    render() {\n        const currentList = this.props.todoLists.find((item) => item.id === this.props.currentTodoList);\n        const currentTodo = currentList.todos.find((item) => item.id === this.props.onUpdateTodoId) || {};\n        return (\n            <Modal\n                {...this.props}\n                size=\"lg\"\n                aria-labelledby=\"contained-modal-title-vcenter\"\n                centered\n            >\n                <Modal.Header closeButton>\n                    <Modal.Title id=\"contained-modal-title-center\">\n                        Удалить дело <i>{currentTodo.text}</i> ?\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Footer>\n                    <Button variant=\"danger\" onClick={this.props.dialogTodoToggle}><i>НЕТ</i></Button>\n                    <Button variant=\"success\" onClick={() => {\n                        this.props.onUpdateTodo('delete', this.props.onUpdateTodoId);\n                        this.props.showAlert('error', `Дело ${currentTodo.text} удалено`);\n                        setTimeout(this.props.closeAlert, 3000)\n                    }}><i>ДА</i></Button>\n                </Modal.Footer>\n            </Modal>\n        );\n\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return state;\n};\n\nexport default connect(mapStateToProps, {dialogTodoToggle, showAlert, onUpdateTodo, closeAlert})(DialogTodo);\n","import React, {Component} from \"react\";\nimport {Modal, Button, InputGroup, FormControl, Form} from \"react-bootstrap\";\nimport {connect} from \"react-redux\";\nimport {closeModalTodo, onUpdateTodo, showAlert, closeAlert, getId} from \"../../actions/index\"\nimport \"./ModalTodo.css\"\n\nclass ModalTodo extends Component {\n    state = {\n        inputValue: '',\n        checkValue: null\n\n    };\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (this.props.onUpdateTodoItem && prevProps !== this.props) {\n            this.setState({\n                inputValue: this.props.onUpdateTodoItem.text,\n                checkValue: this.props.onUpdateTodoItem.important\n            })\n        }\n    }\n\n\n    onChange = (e) => {\n        this.setState({\n            inputValue: e.target.value\n        })\n    };\n    onChangeCheckbox = (e) => {\n        this.setState({\n            checkValue: e.target.checked\n        })\n    };\n\n    onSubmit = (e) => {\n        e.preventDefault();\n        const currentList = this.props.todoLists.find((item) => item.id === this.props.currentTodoList);\n        if (!this.state.inputValue || this.state.inputValue.length <= 0) {\n            this.props.closeModalTodo();\n            this.props.showAlert('error', 'Должно быть больше 0 символов ');\n            setTimeout(this.props.closeAlert, 3000);\n        } else if (this.state.inputValue.length >= 30) {\n            this.props.closeModalTodo();\n            this.props.showAlert('error', 'Должно быть меньше 30 символов ');\n            setTimeout(this.props.closeAlert, 3000);\n        } else if (currentList.todos.some((item) => item.text === this.state.inputValue)) {\n            this.props.closeModalTodo();\n            this.props.showAlert('error', 'Такое название уже есть в списке ');\n            setTimeout(this.props.closeAlert, 3000);\n        } else {\n            if (this.props.onUpdateTodoItem) {\n                this.props.onUpdateTodo('update', this.props.onUpdateTodoItem.id, this.state.inputValue,\n                    this.state.checkValue, this.props.onUpdateTodoItem.done, Date.now());\n                this.props.showAlert('success', `Дело ${this.state.inputValue} добавлено `);\n                setTimeout(this.props.closeAlert, 3000);\n            } else {\n                const currentList = this.props.todoLists.find((item) => item.id === this.props.currentTodoList);\n                this.props.onUpdateTodo('add', getId(currentList.todos), this.state.inputValue,\n                    this.state.checkValue, false, Date.now());\n                this.props.showAlert('success', `Дело ${this.state.inputValue} добавлено `);\n                setTimeout(this.props.closeAlert, 3000);\n            }\n        }\n    };\n\n    render() {\n        return (\n            <Modal\n                {...this.props}\n                size=\"lg\"\n                aria-labelledby=\"contained-modal-title-vcenter\"\n                centered\n            >\n                <Modal.Header closeButton>\n                    <Modal.Title id=\"contained-modal-title-vcenter\">\n                        Добавить дело\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <InputGroup className=\"mb-3\">\n                        <Form className={'form-todo'} onSubmit={this.onSubmit}>\n                            <Form.Label>Название</Form.Label>\n                            <FormControl\n                                onChange={this.onChange} placeholder={'Название дела'}\n                                value={this.state.inputValue}\n                            />\n                            <Form.Label>Срочно</Form.Label>\n                            <FormControl\n                                onChange={this.onChangeCheckbox}\n                                type={'checkbox'}\n                                checked={this.state.checkValue}\n                            />\n                            <Button variant=\"success\" onClick={this.onSubmit}>Добавить</Button>\n                        </Form>\n                    </InputGroup>\n\n\n                </Modal.Body>\n            </Modal>\n        );\n\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return state;\n};\n\nexport default connect(mapStateToProps, {closeModalTodo, onUpdateTodo, showAlert, closeAlert})(ModalTodo);\n","import React from 'react';\nimport {onUpdateTodo, dialogTodoToggle, openModalTodo, closeModalTodo, getDate} from \"../../actions\";\nimport {connect} from \"react-redux\";\nimport {Button, Form} from \"react-bootstrap\";\nimport DialogTodo from \"../DialogTodo/DialogTodo\";\nimport ModalTodo from \"../ModalTodo/ModalTodo\";\nimport \"./Todos.css\"\n\nconst Todos = ({\n                   currentTodoList, todoLists, onUpdateTodo, isTodoDialogOpened, dialogTodoToggle,\n                   isTodoModalOpened, openModalTodo, closeModalTodo\n               }) => {\n    if (!todoLists.length) {\n        return <div className={'todos-title'}><h2>Дела отсутствуют, вы всё сделали!</h2></div>\n    }\n    if (currentTodoList === null) {\n        return <div className={'todos-title'}><h2>Выберите список дел</h2></div>\n    }\n    const idx = todoLists.find((item) => item.id === currentTodoList);\n    let classNames = 'todo-item ';\n    return (\n        <div className={'todos'}>\n            <ModalTodo\n                show={isTodoModalOpened}\n                onHide={closeModalTodo}\n\n            />\n            <DialogTodo\n                show={isTodoDialogOpened}\n                onHide={dialogTodoToggle}\n            />\n            <h3 className={'todos-title'}>{idx.title}</h3>\n            {idx.todos.sort((a, b) => b.date - a.date).map((item, i) => {\n\n                if (item.important) {\n                    classNames = 'todo-item important';\n                } else {\n                    classNames = 'todo-item '\n                }\n\n                return (\n                    <div className={classNames} key={i}>\n                        <Form className={'todo-item checkbox'}>\n                            <Form.Check\n                                onChange={() => onUpdateTodo('doneToggle', item.id)}\n                                type={'checkbox'}\n                                checked={item.done}\n                                size={'lg'}\n                            />\n                        </Form>\n                        <h5 onClick={() => onUpdateTodo('doneToggle', item.id)}>{item.text}\n                            <span>{getDate(item.date)}</span></h5>\n                        <Button variant=\"outline-info\" size={'sm'} onClick={() => openModalTodo(item.id)}>\n                            <i className=\"fa fa-pencil\"></i></Button>\n                        <Button variant=\"outline-info\" size={'sm'} onClick={() => dialogTodoToggle(item.id)}>\n                            <i className=\"fa fa-times\"></i></Button>\n                    </div>)\n            })}\n            <Button className={'add-todo-button'} variant=\"success\" size={'lg'} onClick={openModalTodo}>+</Button>\n\n        </div>\n    )\n};\n\nconst mapStateToProps = (state) => {\n    return state;\n};\n\nexport default connect(mapStateToProps, {onUpdateTodo, dialogTodoToggle, openModalTodo, closeModalTodo})(Todos);\n\n\n","import React from \"react\";\n\nimport AppHeader from \"../AppHeader/AppHeader\";\nimport TodoLists from \"../TodoLists/TodoLists\";\nimport Todos from \"../Todos/Todos\";\nimport \"./App.scss\"\n\nconst App = () => {\n\n    return (\n        <div className={'container-xl'}>\n            <AppHeader/>\n            <div className=\"row\">\n                <div className=\"col-5 todo-lists-wrapper\">\n                    <TodoLists/>\n                </div>\n                <div className=\"col-7 todos-wrapper\">\n                    <Todos/>\n                </div>\n            </div>\n\n        </div>\n    )\n};\n\nexport default App;\n","const initialState = {\n    todoLists: [],\n    error: null,\n    loading: true,\n    sortBy: 'date',\n    filterValue: 'active',\n    currentTodoList: null,\n    isListModalOpened: false,\n    isTodoModalOpened: false,\n    isListDialogOpened: false,\n    isTodoDialogOpened: false,\n    onUpdateTodoId: null,\n    onUpdateListId: null,\n    onUpdateTodoItem: {},\n    onUpdateListItem: {},\n    isAlertShow: {}\n};\n\nconst reducer = (state = initialState, action) => {\n    console.log(action.type);\n\n    switch (action.type) {\n        case 'FETCH_TODO_LISTS_REQUEST':\n            return {\n                ...state,\n                todoLists: [],\n                loading: true,\n                error: null\n            };\n\n        case 'FETCH_TODO_LISTS_SUCCESS':\n            return {\n                ...state,\n                todoLists: action.payload,\n                loading: false,\n                error: null\n            };\n\n        case 'FETCH_TODO_LISTS_FAILURE':\n            return {\n                ...state,\n                todoLists: [],\n                loading: false,\n                error: action.payload\n            };\n\n        case 'SET_CURRENT_TODO_LIST':\n            return {\n                ...state,\n                currentTodoList: action.payload\n            };\n        case 'ON_FILTER_CHANGE':\n            return {\n                ...state,\n                filterValue: action.payload\n            };\n        case 'DIALOG_LIST_TOGGLE':\n            return {\n                ...state,\n                isListDialogOpened: !state.isListDialogOpened,\n                onUpdateListId: action.payload\n            };\n\n        case 'OPEN_MODAL_LIST':\n            const List = state.todoLists.find((item) => item.id === action.payload);\n            return {\n                ...state,\n                isListModalOpened: true,\n                onUpdateListId: action.payload,\n                onUpdateListItem: List\n            };\n        case 'CLOSE_MODAL_LIST':\n            return {\n                ...state,\n                isListModalOpened: false,\n                onUpdateListId: null,\n                onUpdateListItem: {}\n            };\n        case 'DIALOG_TODO_TOGGLE':\n            return {\n                ...state,\n                isTodoDialogOpened: !state.isTodoDialogOpened,\n                onUpdateTodoId: action.payload\n            };\n\n        case 'OPEN_MODAL_TODO':\n            const currentListModal = state.todoLists.find((item) => item.id === state.currentTodoList);\n            const todoModal = currentListModal.todos.find((item) => item.id === action.payload);\n            return {\n                ...state,\n                onUpdateTodoId: action.payload,\n                isTodoModalOpened: true,\n                onUpdateTodoItem: todoModal\n            };\n        case 'CLOSE_MODAL_TODO':\n            return {\n                ...state,\n                onUpdateTodoItem: {},\n                isTodoModalOpened: false\n            };\n\n        case 'UPDATE_LIST':\n            let lists;\n            switch (action.action) {\n                case 'add':\n                    lists = [...state.todoLists, {id: action.id, title: action.title, todos: []}];\n                    break;\n                case 'update':\n                    const newList = state.todoLists.find((item) => item.id === action.id);\n                    const id = state.todoLists.findIndex((item) => item.id === action.id);\n\n                    newList.title = action.title;\n                    lists = [\n                        ...state.todoLists.slice(0, id),\n                        newList,\n                        ...state.todoLists.slice(id + 1)\n                    ];\n                    break;\n                case 'delete':\n                    const listId = state.todoLists.findIndex((item) => item.id === action.id);\n                    lists = [\n                        ...state.todoLists.slice(0, listId),\n                        ...state.todoLists.slice(listId + 1)\n                    ];\n                    break;\n                default :\n            }\n            return {\n                ...state,\n                currentTodoList: action.action !== 'delete' ? action.id : null,\n                isListDialogOpened: false,\n                isListModalOpened: false,\n                onUpdateListItem: {},\n                todoLists: lists,\n            };\n        case 'UPDATE_TODO':\n            const {todoLists, currentTodoList} = state;\n            const currentList = todoLists.find((item) => item.id === currentTodoList);\n            const todo = currentList.todos.find((item) => item.id === action.id);\n            const todoId = currentList.todos.findIndex((item) => item.id === action.id);\n            const ListId = todoLists.findIndex((item) => item.id === currentTodoList);\n            let todos, newTodo;\n            switch (action.action) {\n                case 'add':\n                    newTodo = {\n                        id: action.id,\n                        text: action.text,\n                        important: action.important,\n                        done: false,\n                        date: action.date\n                    };\n                    todos = [\n                        ...currentList.todos,\n                        newTodo\n                    ];\n                    break;\n                case 'delete':\n                    todos = [\n                        ...currentList.todos.slice(0, todoId),\n                        ...currentList.todos.slice(todoId + 1)\n                    ];\n                    break;\n                case 'doneToggle':\n                    newTodo = {\n                        ...currentList.todos[todoId],\n                        done: !todo.done\n                    };\n                    todos = [\n                        ...currentList.todos.slice(0, todoId),\n                        newTodo,\n                        ...currentList.todos.slice(todoId + 1)\n                    ];\n                    break;\n                case 'importantToggle':\n                    newTodo = {\n                        ...currentList.todos[todoId],\n                        important: !todo.important\n                    };\n                    todos = [\n                        ...currentList.todos.slice(0, todoId),\n                        newTodo,\n                        ...currentList.todos.slice(todoId + 1)\n                    ];\n                    break;\n                case 'update':\n                    newTodo = {\n                        id: action.id,\n                        text: action.text,\n                        important: action.important,\n                        done: action.done,\n                        date: action.date\n                    };\n                    todos = [\n                        ...currentList.todos.slice(0, todoId),\n                        newTodo,\n                        ...currentList.todos.slice(todoId + 1)\n                    ];\n                    break;\n                default:\n                    return {\n                        newTodo: [...currentList.todos[todoId]],\n                        todos: [...currentList.todos]\n                    }\n            }\n            const newList = {\n                ...currentList,\n                todos: todos\n            };\n            const newLists = [\n                ...state.todoLists.slice(0, ListId),\n                newList,\n                ...state.todoLists.slice(ListId + 1)\n            ];\n            return {\n                ...state,\n                todoLists: newLists,\n                isTodoDialogOpened: false,\n                isTodoModalOpened: false,\n                onUpdateTodoItem: {}\n            };\n        case 'SHOW_ALERT':\n            return {\n                ...state,\n                isAlertShow: {\n                    status: action.status,\n                    message: action.message\n                }\n            };\n        case 'CLOSE_ALERT':\n            return {\n                ...state,\n                isAlertShow: false\n            };\n        default:\n            return {\n                ...state\n            };\n    }\n};\n\nexport default reducer;\n","import {createStore} from \"redux\";\n\nimport reducer from './reducers'\n\nconst store = createStore(reducer);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux'\n\nimport App from './components/App/App';\nimport store from \"./store\";\n\nimport TodoService from \"./services/todo-service\";\nimport {TodoServiceProvider} from \"./components/todoServiceContext/todoServiceContext\";\n\nconst todoService = new TodoService();\n\nReactDOM.render(\n    <Provider store={store}>\n        <TodoServiceProvider value={todoService}>\n            <App/>\n        </TodoServiceProvider>\n    </Provider>,\n    document.getElementById('root')\n);\n","export default class TodoService {\n\n    data = [\n        {\n            id: 1,\n            title: 'todo list 1',\n            todos: [\n                {id: 1, text: 'todo 1-1', important: false, done: false, date: 1587815200593},\n                {id: 2, text: 'todo 1-2', important: false, done: false, date: 1687815399008},\n                {id: 3, text: 'todo 1-3', important: false, done: false, date: 1111111111111},\n                {id: 4, text: 'todo 1-4', important: false, done: false, date: 1111111111111},\n                {id: 5, text: 'todo 1-5', important: false, done: false, date: 1111111111111}]\n        }, {\n            id: 2,\n            title: 'todo list 2',\n            todos: [\n                {id: 1, text: 'todo 2-1', important: false, done: false, date: 1111111111111},\n                {id: 2, text: 'todo 2-2', important: false, done: false, date: 1111111111111},\n                {id: 3, text: 'todo 2-3', important: false, done: false, date: 1111111111111},\n                {id: 4, text: 'todo 2-4', important: false, done: false, date: 1111111111111},\n                {id: 5, text: 'todo 2-5', important: false, done: false, date: 1111111111111}]\n        }, {\n            id: 3,\n            title: 'todo list 3',\n            todos: [\n                {id: 1, text: 'todo 3-1', important: false, done: false, date: 1111111111111},\n                {id: 2, text: 'todo 3-2', important: false, done: false, date: 1111111111111},\n                {id: 3, text: 'todo 3-3', important: false, done: false, date: 1111111111111},\n                {id: 4, text: 'todo 3-4', important: false, done: false, date: 1111111111111},\n                {id: 5, text: 'todo 3-5', important: false, done: false, date: 1111111111111}]\n        }, {\n            id: 4,\n            title: 'todo list 4',\n            todos: [\n                {id: 1, text: 'todo 4-1', important: false, done: false, date: 1111111111111},\n                {id: 2, text: 'todo 4-2', important: false, done: false, date: 1111111111111},\n                {id: 3, text: 'todo 4-3', important: false, done: false, date: 1111111111111},\n                {id: 4, text: 'todo 4-4', important: false, done: false, date: 1111111111111},\n                {id: 5, text: 'todo 4-5', important: false, done: false, date: 1111111111111}]\n        },\n    ];\n\n    getTodoLists() {\n        return new Promise((resolve, reject) => {\n            if (!localStorage.getItem('data-todo-26042020') ||\n                localStorage.getItem('data-todo-26042020').length < 3) {\n                setTimeout(() => {\n                    if (Math.random() > 0.90) {\n                        reject(new Error('Can`t load todo =( '));\n                    } else {\n                        resolve(this.data);\n                    }\n                }, 1500);\n            } else {\n                const data = localStorage.getItem('data-todo-26042020');\n                resolve(JSON.parse(data));\n                console.log(JSON.parse(data))\n            }\n\n        });\n    }\n}\n"],"sourceRoot":""}